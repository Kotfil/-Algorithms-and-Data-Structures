// –ó–∞–¥–∞—á–∞: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ–∑–æ–≤ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã
// –ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å—Ç—Ä–æ–∫, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö ‚Äî –ø–∞–ª–∏–Ω–¥—Ä–æ–º.

// –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:
//     isPal[i][j] = true –µ—Å–ª–∏ s[i..j] ‚Äî –ø–∞–ª–∏–Ω–¥—Ä–æ–º.
//
//     dp[i] ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ–∑–æ–≤ –¥–ª—è s[0..i].
//
//     –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ s[start..end], –∏ –µ—Å–ª–∏ —ç—Ç–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º dp[end].

    function minCut(s) {
    const n = s.length;
    const isPal = Array.from({ length: n }, () => Array(n).fill(false));
    const dp = Array(n).fill(0);

    // –ü—Ä–µ–¥—Ä–∞—Å—á—ë—Ç –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤
    for (let end = 0; end < n; end++) {
        let minCuts = end;
        for (let start = 0; start <= end; start++) {
            if (s[start] === s[end] && (end - start <= 1 || isPal[start + 1][end - 1])) {
                isPal[start][end] = true;
                minCuts = start === 0 ? 0 : Math.min(minCuts, dp[start - 1] + 1);
            }
        }
        dp[end] = minCuts;
    }

    return dp[n - 1];
}

console.log(minCut("aab")); // üëâ 1
console.log(minCut("a"));   // üëâ 0
console.log(minCut("abccba")); // üëâ 0 (–≤—Å—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–∞–ª–∏–Ω–¥—Ä–æ–º)
