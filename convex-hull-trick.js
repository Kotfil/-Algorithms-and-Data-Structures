// –ß—Ç–æ —Ç–∞–∫–æ–µ Convex Hull Trick?
//     –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —Å –ª–∏–Ω–µ–π–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π, –∫–æ–≥–¥–∞ DP –∏–º–µ–µ—Ç –≤–∏–¥:
// dp[i] = min(dp[j] + b[j] * a[i])    (j < i)

// –ï—Å–ª–∏:
//     a[i] –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∞—è
// b[j] —Ç–æ–∂–µ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∞—è –∏–ª–∏ —É–±—ã–≤–∞—é—â–∞—è
// ‚Üí –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä—è–º—ã–µ y = b[j] * x + dp[j] –∏ –∏—Å–∫–∞—Ç—å –º–∏–Ω–∏–º—É–º –ø–æ x = a[i].
//
// üì¶ –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏:
//     –£ —Ç–µ–±—è –µ—Å—Ç—å –º–∞—Å—Å–∏–≤—ã a[] –∏ b[], –Ω—É–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å:

// dp[i] = min(dp[j] + b[j] * a[i])  (–¥–ª—è –≤—Å–µ—Ö j < i)

// a[i], b[i] ‚Äî –¥–∞–Ω—ã, dp[0] = 0
//
// –†–∞–∑–º–µ—Ä n –¥–æ 1e5

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è CHT (JS):


class ConvexHull {
    constructor() {
        this.lines = [];
    }

    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä—è–º—É—é: y = m * x + b
    add(m, b) {
        while (this.lines.length >= 2 && this.bad(this.lines[this.lines.length - 2], this.lines[this.lines.length - 1], [m, b])) {
            this.lines.pop();
        }
        this.lines.push([m, b]);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –ª–∏—à–Ω—è—è –ª–∏ —Å—Ä–µ–¥–Ω—è—è –ø—Ä—è–º–∞—è
    bad(line1, line2, line3) {
        const [m1, b1] = line1, [m2, b2] = line2, [m3, b3] = line3;
        return (b3 - b1) * (m1 - m2) < (b2 - b1) * (m1 - m3);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º—É–º –≤ —Ç–æ—á–∫–µ x (–ø–µ—Ä–µ–±–æ—Ä–æ–º, –º–æ–∂–Ω–æ –±–∏–Ω–ø–æ–∏—Å–∫–æ–º)
    query(x) {
        let l = 0, r = this.lines.length - 1;
        while (l < r) {
            const m  = Math.floor((l + r) / 2);
            const val1 = this.eval(this.lines[m], x);
            const val2 = this.eval(this.lines[m + 1], x);
            if (val1 <= val2) r = m;
            else l = m + 1;
        }
        return this.eval(this.lines[l], x);
    }

    eval([m, b], x) {
        return m * x + b;
    }
}

function convexHullDP(a, b) {
    const n = a.length;
    const dp = Array(n).fill(0);
    const cht = new ConvexHull();
    dp[0] = 0;
    cht.add(b[0], dp[0]);

    for (let i = 1; i < n; i++) {
        dp[i] = cht.query(a[i]);
        cht.add(b[i], dp[i]);
    }

    return dp;
}

