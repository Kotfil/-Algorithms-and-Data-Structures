// ‚ö° 1. QuickSort (–±—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è)
// –†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π. –†–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –≤ —Å—Ä–µ–¥–Ω–µ–º: O(n log n).

function quickSort(arr) {
    if (arr.length <= 1) return arr;
    //–ª—É—á—à–µ —Ü–µ–Ω—Ç—Ä —Å –ø–∏–≤–æ—Ç–∞ –∏–ª–∏ —Ä–∞–Ω–¥–æ–º
    const pivot = arr[arr.length - 1];
    const left = [];
    const right = [];

    for (let i = 0; i < arr.length - 1; i++) {
        if (arr[i] < pivot) left.push(arr[i]);
        else right.push(arr[i]);
    }

    return [...quickSort(left), pivot, ...quickSort(right)];
}

// –ü—Ä–∏–º–µ—Ä:
console.log(quickSort([3, 6, 2, 7, 1]));

// üåä 2. MergeSort (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º)
// –î–µ–ª–∏–º –ø–æ–ø–æ–ª–∞–º, —Å–æ—Ä—Ç–∏—Ä—É–µ–º, —Å–ª–∏–≤–∞–µ–º. –í—Å–µ–≥–¥–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ: O(n log n)
function mergeSort(arr) {
    if (arr.length <= 1) return arr;

    const mid = Math.floor(arr.length / 2);
    const left = mergeSort(arr.slice(0, mid));
    const right = mergeSort(arr.slice(mid));

    return merge(left, right);
}

function merge(left, right) {
    const result = [];
    let i = 0, j = 0;

    while (i < left.length && j < right.length) {
        if (left[i] < right[j]) result.push(left[i++]);
        else result.push(right[j++]);
    }

    return result.concat(left.slice(i)).concat(right.slice(j));
}

// –ü—Ä–∏–º–µ—Ä:
console.log(mergeSort([4, 1, 5, 3, 2]));
// üß± 3. HeapSort (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫—É—á–µ–π / –ø–∏—Ä–∞–º–∏–¥–æ–π)
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç max heap. –ë—ã—Å—Ç—Ä–∞—è –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø. –ø–∞–º—è—Ç–∏: O(n log n), –Ω–æ –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è.

    function heapSort(arr) {
    const n = arr.length;

    function heapify(i, size) {
        let largest = i;
        const left = 2 * i + 1;
        const right = 2 * i + 2;

        if (left < size && arr[left] > arr[largest]) largest = left;
        if (right < size && arr[right] > arr[largest]) largest = right;

        if (largest !== i) {
            [arr[i], arr[largest]] = [arr[largest], arr[i]];
            heapify(largest, size);
        }
    }

    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) heapify(i, n);
    for (let i = n - 1; i >= 0; i--) {
        [arr[0], arr[i]] = [arr[i], arr[0]];
        heapify(0, i);
    }

    return arr;
}

// –ü—Ä–∏–º–µ—Ä:
console.log(heapSort([8, 3, 1, 6, 5, 2]));

// üßÆ 4. Counting Sort (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª)
// –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–π: O(n + k), –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∏—Å–ª–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ.
function countingSort(arr) {
    const max = Math.max(...arr);
    const count = Array(max + 1).fill(0);

    for (let num of arr) count[num]++;

    const result = [];
    for (let i = 0; i < count.length; i++) {
        while (count[i]--) result.push(i);
    }

    return result;
}

// –ü—Ä–∏–º–µ—Ä:
console.log(countingSort([4, 2, 2, 8, 3, 3, 1]));

