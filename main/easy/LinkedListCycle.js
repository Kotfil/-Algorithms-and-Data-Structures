// üìÑ –£—Å–ª–æ–≤–∏–µ:
// –î–∞–Ω –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫, –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –≤ –Ω—ë–º —Ü–∏–∫–ª
// (—Ç–æ –µ—Å—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ø–∞—Å—Ç—å, –¥–≤–∏–≥–∞—è—Å—å –ø–æ next, –≤ —É–∂–µ –ø–æ—Å–µ—â—ë–Ω–Ω—ã–π —É–∑–µ–ª).
// –ò–¥–µ—è:
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è (—Ñ–∞—Å—Ç –∏ —Å–ª–æ—É):
// slow –¥–≤–∏–≥–∞–µ—Ç—Å—è –ø–æ –æ–¥–Ω–æ–º—É —É–∑–ª—É –∑–∞ —à–∞–≥
// fast –¥–≤–∏–≥–∞–µ—Ç—Å—è –ø–æ –¥–≤–∞ —É–∑–ª–∞ –∑–∞ —à–∞–≥
// –ï—Å–ª–∏ —Ü–∏–∫–ª –µ—Å—Ç—å ‚Äî fast –∏ slow –≤ –∏—Ç–æ–≥–µ –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞.
//–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî fast –¥–æ–π–¥—ë—Ç –¥–æ –∫–æ–Ω—Ü–∞ (null).

class ListNode {
    constructor(val, next) {
        this.val = val === undefined ? 0 : val;
        this.next = next === undefined ? null : next;
    }
}

const hasCycle = (head) => {
    if (!head) return false;

    let slow = head;
    let fast = head.next;

    while (fast && fast.next) {
        if (slow === fast) return true;

        slow = slow.next;
        fast = fast.next.next;
    }

    return false;
};
// –ü—Ä–∏–º–µ—Ä 1: –¶–∏–∫–ª –µ—Å—Ç—å
// –°–æ–∑–¥–∞—ë–º —É–∑–ª—ã
const node3 = new ListNode(3);
const node2 = new ListNode(2, node3);
const node1 = new ListNode(1, node2);
// –°–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª: —Å–ª–µ–¥—É—é—â–∏–π –¥–ª—è node3 ‚Äî —ç—Ç–æ node2
node3.next = node2;

const head = node1;

console.log(hasCycle(head)); // –í—ã–≤–µ–¥–µ—Ç: true

// –ü—Ä–∏–º–µ—Ä 2: –¶–∏–∫–ª–∞ –Ω–µ—Ç

// const node3 = new ListNode(3);
// const node2 = new ListNode(2, node3);
// const node1 = new ListNode(1, node2);
//
// const head = node1;
//
// console.log(hasCycle(head)); // –í—ã–≤–µ–¥–µ—Ç: false
