// Monotonic Queue Optimization

// –≠—Ç–æ —Ç—Ä—é–∫ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è DP —Å —Ñ–æ—Ä–º–æ–π:

// dp[i] = min(dp[j] + cost(j, i)), –≥–¥–µ j ‚àà [i - k, i - 1]
// –ï—Å–ª–∏ cost(j, i) —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç–∏, —Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å deque
// (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—é—é –æ—á–µ—Ä–µ–¥—å),
// —á—Ç–æ–±—ã –∑–∞ O(n) –Ω–∞—Ö–æ–¥–∏—Ç—å –º–∏–Ω–∏–º—É–º –≤–º–µ—Å—Ç–æ O(k) –Ω–∞ –∫–∞–∂–¥—ã–π —à–∞–≥.

// –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏: –°–∫–æ–ª—å–∑—è—â–µ–µ –º–∏–Ω–∏–º—É–º DP
// –î–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å a[0..n-1] –∏ —á–∏—Å–ª–æ k.
//     –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ dp[i] = min(dp[j] + a[i]), –≥–¥–µ j ‚àà [i-k, i-1], –∏ dp[0] = a[0].

function slidingWindowDP(a, k) {
    const n = a.length;
    const dp = Array(n).fill(Infinity);
    const deque = []; // —Ö—Ä–∞–Ω–∏–º –∏–Ω–¥–µ–∫—Å—ã
    dp[0] = a[0];
    deque.push(0);

    for (let i = 1; i < n; i++) {
        // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ–∫–Ω–∞
        while (deque.length && deque[0] < i - k) {
            deque.shift();
        }

        // dp[i] = dp[deque[0]] + a[i]
        dp[i] = dp[deque[0]] + a[i];

        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º deque –º–æ–Ω–æ—Ç–æ–Ω–Ω—ã–º –ø–æ dp[j]
        while (deque.length && dp[i] <= dp[deque[deque.length - 1]]) {
            deque.pop();
        }

        deque.push(i);
    }

    return dp;
}

const a = [1, 3, 2, 6, 4, 1];
const k = 2;
console.log(slidingWindowDP(a, k));
// üëâ dp-–º–∞—Å—Å–∏–≤, –≥–¥–µ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –±–µ—Ä—ë–º –º–∏–Ω–∏–º—É–º –∑–∞ O(1)
