// –ó–∞–¥–∞—á–∞: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∑–∞–¥–∞—á–∏ (Assignment Problem)
// –£ —Ç–µ–±—è –µ—Å—Ç—å n —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –∏ n –∑–∞–¥–∞—á. –ö–∞–∂–¥—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ª—é–±—É—é –∑–∞–¥–∞—á—É –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Ü–µ–Ω—É.
//     –ù—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–∞–∂–¥–æ–º—É —Ä–∞–±–æ—Ç–Ω–∏–∫—É —Ä–æ–≤–Ω–æ –æ–¥–Ω—É —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å—É–º–º–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π –±—ã–ª–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π.

function minAssignmentCost(cost) {
    const n = cost.length;
    const size = 1 << n; // –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—Å–∫–∏ (2^n)
    const dp = Array(size).fill(Infinity);
    dp[0] = 0;

    for (let mask = 0; mask < size; mask++) {
        const worker = countBits(mask); // —Å–∫–æ–ª—å–∫–æ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ
        if (worker >= n) continue;

        for (let task = 0; task < n; task++) {
            if ((mask & (1 << task)) === 0) {
                const newMask = mask | (1 << task);
                dp[newMask] = Math.min(dp[newMask], dp[mask] + cost[worker][task]);
            }
        }
    }

    return dp[size - 1];
}

function countBits(x) {
    let count = 0;
    while (x) {
        count += x & 1;
        x >>= 1;
    }
    return count;
}


const cost = [
    [9, 2, 7],
    [6, 4, 3],
    [5, 8, 1]
];

console.log(minAssignmentCost(cost)); // üëâ 10 (—Ä–∞–±–æ—Ç–Ω–∏–∫ 0 ‚Üí 1, 1 ‚Üí 2, 2 ‚Üí 0)
