// –ß—Ç–æ —Ç–∞–∫–æ–µ Divide and Conquer Optimization?
//     –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –¥–≤—É–º–µ—Ä–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–µ:
//     dp[i][j] = min_{k < j} (dp[i - 1][k] + cost(k, j))

// –ì–¥–µ:
//     i ‚Äî —ç—Ç–∞–ø (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø)
//     j ‚Äî –ø–æ–∑–∏—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
//     k ‚Äî "—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å" (–∏–ª–∏ —Ç–æ—á–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è)

// –ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å?
//     –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:
//
// opt(i, j) ‚â§ opt(i, j+1)
//
//     –¢–æ –µ—Å—Ç—å, –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π k (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
//     —Å–¥–≤–∏–≥–∞–µ—Ç—Å—è –≤–ø—Ä–∞–≤–æ –∏–ª–∏ –æ—Å—Ç–∞—ë—Ç—Å—è, –∞ –Ω–µ "—Å–∫–∞—á–µ—Ç".
//     –≠—Ç–æ –∏ –µ—Å—Ç—å –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º—É–º–∞,
//     –∏ —ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π.

// –í—Ä–µ–º—è:
//     –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: O(k * n^2)
// –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π: O(k * n * log n)
//
// üí° –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏:
//     –†–∞–∑–±–∏—Ç—å –º–∞—Å—Å–∏–≤ –¥–ª–∏–Ω—ã n –Ω–∞ k –≥—Ä—É–ø–ø, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å:

// dp[i][j] = min(dp[i - 1][m] + cost(m, j)), –≥–¥–µ m < j

function compute(dpCurr, dpPrev, l, r, optL, optR, cost) {
    if (l > r) return;

    const mid = Math.floor((l + r) / 2);
    let bestK = -1;
    dpCurr[mid] = Infinity;

    for (let k = optL; k <= Math.min(mid, optR); k++) {
        const val = dpPrev[k] + cost(k, mid);
        if (val < dpCurr[mid]) {
            dpCurr[mid] = val;
            bestK = k;
        }
    }

    compute(dpCurr, dpPrev, l, mid - 1, optL, bestK, cost);
    compute(dpCurr, dpPrev, mid + 1, r, bestK, optR, cost);
}

function divideAndConquerDP(n, k, cost) {
    let dpPrev = Array(n + 1).fill(0);
    let dpCurr = Array(n + 1).fill(0);

    for (let i = 1; i <= k; i++) {
        compute(dpCurr, dpPrev, 1, n, 0, n, cost);
        [dpPrev, dpCurr] = [dpCurr, dpPrev];
    }

    return dpPrev[n];
}

// –ü—Ä–µ–¥—Ä–∞—Å—á—ë—Ç cost(m, j) –∫–∞–∫ —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –º–µ–∂–¥—É m –∏ j:
const prefixSum = [0]; // sum of elements
const prefixSq = [0];  // sum of squares

for (let i = 0; i < arr.length; i++) {
    prefixSum[i + 1] = prefixSum[i] + arr[i];
    prefixSq[i + 1] = prefixSq[i] + arr[i] * arr[i];
}

function cost(l, r) {
    const sum = prefixSum[r] - prefixSum[l];
    const sqSum = prefixSq[r] - prefixSq[l];
    return sqSum - (sum * sum) / (r - l);
}

// üß† –ì–¥–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è:
//     –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –æ—Ç—Ä–µ–∑–∫–∏ (Knuth/Divide & Conquer DP)
// –†–∞–∑–±–∏–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫, –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
// –ó–∞–¥–∞—á–∏ –≤—Ä–æ–¥–µ:
// –†–∞–∑–¥–µ–ª–∏—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞ K —Å–µ–≥–º–µ–Ω—Ç–æ–≤, –º–∏–Ω–∏–º–∏–∑–∏—Ä—É—è —Å—É–º–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
// –†–∞–∑–±–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –º–∞—Ç—Ä–∏—Ü —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é

